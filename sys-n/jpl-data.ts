import { AU } from '../sys/constants'

const toJ2000CSMat = new THREE.Matrix4().makeRotationX(-.5 * Math.PI)
toJ2000CSMat.multiply(new THREE.Matrix4().makeScale(1 / AU, 1 / AU, 1 / AU))

const toThreeJSCSMat = new THREE.Matrix4().makeRotationX(.5 * Math.PI)
toThreeJSCSMat.multiply(new THREE.Matrix4().makeScale(AU, AU, AU))

// data on 2021-06-30
const BOOTSTRAP_STATE = {
  Sol: parse(`
  X = 0.000000000000000E+00 Y = 0.000000000000000E+00 Z = 0.000000000000000E+00
  VX= 0.000000000000000E+00 VY= 0.000000000000000E+00 VZ= 0.000000000000000E+00
  LT= 0.000000000000000E+00 RG= 0.000000000000000E+00 RR=-NaN  
  `),
  Mercury: parse(`
  X = 3.012935918964594E-01 Y =-2.788156976619674E-01 Z =-5.042148516534437E-02
  VX= 1.353961390211273E-02 VY= 2.197439592451381E-02 VZ= 5.536948697822908E-04
  LT= 2.388708216017943E-03 RG= 4.135920066283667E-01 RR=-5.017809119465085E-03`),
  Venus: parse(`
  X =-6.738542287147846E-01 Y = 2.471376575208060E-01 Z = 4.227655089795478E-02
  VX=-7.058824059055602E-03 VY=-1.908379086296848E-02 VZ= 1.454258067219449E-04
  LT= 4.152528799556816E-03 RG= 7.189880736684691E-01 RR= 6.459519243494290E-05`),
  Earth: parse(`
  X = 1.441226168058890E-01 Y =-1.006369021715738E+00 Z = 5.014695214271168E-05
  VX= 1.674837463620341E-02 VY= 2.368408002995637E-03 VZ=-1.911831254428104E-07
  LT= 5.871603213472773E-03 RG= 1.016636581605632E+00 RR= 2.983084199215344E-05`),
  Luna: parse(`
  X = 1.466311754287446E-01 Y =-1.006982414102204E+00 Z =-1.850398508145309E-04
  VX= 1.692432374767276E-02 VY= 2.924902904167131E-03 VZ= 1.958087968929087E-06
  LT= 5.877180389260339E-03 RG= 1.017602239658731E+00 RR=-4.556718207250655E-04`),
  Mars: parse(`
  X =-1.448600332238662E+00 Y = 8.193773588838459E-01 Z = 5.270552213974831E-02
  VX=-6.365587925097285E-03 VY=-1.098631180557002E-02 VZ=-7.408681607129227E-05
  LT= 9.616888484293108E-03 RG= 1.665112624082062E+00 RR= 1.293323013883035E-04`),
  Phobos: parse(`
  X =-1.448636912955825E+00 Y = 8.194235069902612E-01 Z = 5.272795792789954E-02
  VX=-7.185434988866844E-03 VY=-1.183023155576403E-02 VZ= 2.767613360446056E-04
  LT= 9.617207543629942E-03 RG= 1.665167867493740E+00 RR= 4.382198365184310E-04
  `),
  Jupiter: parse(`
  X = 3.991991996937735E+00 Y =-3.074114293774820E+00 Z =-7.654584301253331E-02
  VX= 4.517955929791265E-03 VY= 6.341150337931315E-03 VZ=-1.274165983227954E-04
  LT= 2.910313318878445E-02 RG= 5.039051305641578E+00 RR=-2.873603938130171E-04`),
  Saturn: parse(`
  X = 6.246586865894837E+00 Y =-7.752029159654998E+00 Z =-1.138245171847152E-01
  VX= 4.037986551294591E-03 VY= 3.494059395428213E-03 VZ=-2.214513253256783E-04
  LT= 5.750245958224371E-02 RG= 9.956242242232939E+00 RR=-1.845284524085752E-04
  `),
  Titan: parse(`
  X = 6.244562101344562E+00 Y =-7.758972560765909E+00 Z =-1.100430948437016E-01
  VX= 7.166793449384527E-03 VY= 2.733963917630362E-03 VZ=-1.412974736554554E-04
  LT= 5.752611106621603E-02 RG= 9.960337369737529E+00 RR= 2.365008702018336E-03
  `),
  Uranus: parse(`
  X = 1.489003887836047E+01 Y = 1.297137989750993E+01 Z =-1.447505594168441E-01
  VX=-2.608338936665911E-03 VY= 2.788545765303041E-03 VZ= 4.401562779750461E-05
  LT= 1.140560185436674E-01 RG= 1.974818743502964E+01 RR=-1.353720683024938E-04
  `),
  Neptune: parse(`
  X = 2.955131336935145E+01 Y =-4.670028584989820E+00 Z =-5.849322990282723E-01
  VX= 4.743137601421741E-04 VY= 3.126280117796016E-03 VZ=-7.561400809434628E-05
  LT= 1.728252265577820E-01 RG= 2.992376036918954E+01 RR=-1.801223747258515E-05
  `),
  Nereid: parse(`
  X = 2.957436238184004E+01 Y =-4.612102216553029E+00 Z =-5.797191974056967E-01
  VX= 2.764191223002020E-04 VY= 3.312614705296445E-03 VZ=-7.410286284270414E-05
  LT= 1.729042487321095E-01 RG= 2.993744263453659E+01 RR=-2.358330859026032E-04
  `),
  Pluto: parse(`
  X = 1.458832743286945E+01 Y =-3.104225281608275E+01 Z =-8.965108504586328E-01
  VX= 2.926135398532500E-03 VY= 6.633020769830009E-04 VZ=-9.270261609733060E-04
  LT= 1.981637899346735E-01 RG= 3.431099661757436E+01 RR= 6.682440561866564E-04
  `),
  Charon: parse(`
  X = 1.458824214409921E+01 Y =-3.104235177053765E+01 Z =-8.965208148621244E-01
  VX= 2.882145014675558E-03 VY= 6.893022538544229E-04 VZ=-8.086965726472294E-04
  LT= 1.981640990681057E-01 RG= 3.431105014236893E+01 RR= 6.229153450484341E-04
  `),
  Halley: parse(`
  X =-2.016390779422536E+01 Y = 2.687926179035621E+01 Z =-9.981238578546021E+00
  VX= 2.989930932050898E-04 VY= 4.872598905265768E-04 VZ= 7.079124307776044E-07
  LT= 2.024484372549403E-01 RG= 3.505286030398064E+01 RR= 2.014457904663579E-04
  `),
  Tempel1: parse(`
  X =-2.117069667285671E+00 Y = 1.501124513573701E+00 Z = 4.652219538999914E-01
  VX=-1.205781718805296E-03 VY=-1.134325609036156E-02 VZ=-5.531156636967759E-04
  LT= 1.522787476892973E-02 RG= 2.636624783275670E+00 RR=-5.587536581610384E-03`),
  Holmes: parse(`
  X = 1.733715537353918E+00 Y = 1.341084503758611E+00 Z = 7.153426612909051E-01
  VX=-5.786907313928142E-03 VY= 1.168965942368018E-02 VZ= 2.268954894877739E-03
  LT= 1.331628678177824E-02 RG= 2.305643583415836E+00 RR= 3.151853247852692E-03`)
}

// at phelion point
export const BEST_INITIAL_VELOCITY = {
  Mecury: 0.387,
  Venus: 0.346,
  Earth: 0.0289,
  Mars: 0.2178,
  Jupiter: 0.123,
  Saturn: 0.0902,
  Uranus: 0.065,
  Neptune: 0.0533,
  Luna: .000004
}

function parse(txt: string) {
  const regx = /-?\d\.\d+?E[+-]\d\d/ig
  let match = null
  const values: number[] = []
  while (match = regx.exec(txt)) {
    values.push(Number(match[0]))
  }
  const posi = values.slice(0, 3) as THREE.Vector3Tuple
  const velo = values.slice(3, 6) as THREE.Vector3Tuple
  return { velo, posi }
}

export {
  toThreeJSCSMat,
  toJ2000CSMat,
  BOOTSTRAP_STATE
}